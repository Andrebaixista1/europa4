-- ============================================================
-- SCRIPT COMPLETO PARA RECRIAR TABELAS DO ZERO
-- Sistema Nova Europa com usu√°rio master √∫nico
-- ============================================================

USE europa4;
GO

-- ============================================================
-- 1. DROPAR TABELAS EXISTENTES (SE HOUVER)
-- ============================================================
IF OBJECT_ID('AuditoriaLogin', 'U') IS NOT NULL DROP TABLE AuditoriaLogin;
IF OBJECT_ID('NivelPermissoes', 'U') IS NOT NULL DROP TABLE NivelPermissoes;
IF OBJECT_ID('Usuarios', 'U') IS NOT NULL DROP TABLE Usuarios;
IF OBJECT_ID('Permissoes', 'U') IS NOT NULL DROP TABLE Permissoes;
IF OBJECT_ID('Niveis', 'U') IS NOT NULL DROP TABLE Niveis;
GO

-- Dropar fun√ß√µes e procedures
IF OBJECT_ID('dbo.CriptografarSenha', 'FN') IS NOT NULL DROP FUNCTION dbo.CriptografarSenha;
IF OBJECT_ID('sp_GerarSalt', 'P') IS NOT NULL DROP PROCEDURE sp_GerarSalt;
IF OBJECT_ID('sp_CriarUsuario', 'P') IS NOT NULL DROP PROCEDURE sp_CriarUsuario;
IF OBJECT_ID('sp_BuscarHierarquiaUsuario', 'P') IS NOT NULL DROP PROCEDURE sp_BuscarHierarquiaUsuario;
GO

-- ============================================================
-- 2. CRIAR TABELA DE N√çVEIS HIER√ÅRQUICOS
-- ============================================================
CREATE TABLE Niveis (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    Nome NVARCHAR(50) NOT NULL UNIQUE,
    Nivel INT NOT NULL UNIQUE, -- Menor n√∫mero = maior hierarquia
    Descricao NVARCHAR(255),
    DataCriacao DATETIME2 DEFAULT GETDATE(),
    Ativo BIT DEFAULT 1
);

-- Inserir n√≠veis
INSERT INTO Niveis (Nome, Nivel, Descricao) VALUES
('Master', 1, 'N√≠vel m√°ximo - acesso completo ao sistema'),
('Supervisor', 2, 'N√≠vel supervis√≥rio - gerenciamento e supervis√£o'),
('Operador', 3, 'N√≠vel operacional - opera√ß√µes b√°sicas do sistema');
GO

-- ============================================================
-- 3. CRIAR TABELA DE PERMISS√ïES
-- ============================================================
CREATE TABLE Permissoes (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    Nome NVARCHAR(100) NOT NULL UNIQUE,
    Descricao NVARCHAR(255),
    Modulo NVARCHAR(50),
    Recurso NVARCHAR(50),
    DataCriacao DATETIME2 DEFAULT GETDATE(),
    Ativo BIT DEFAULT 1
);

-- Inserir permiss√µes
INSERT INTO Permissoes (Nome, Descricao, Modulo, Recurso) VALUES
('view:master', 'Visualizar √°rea master', 'view', 'master'),
('view:supervision', 'Visualizar √°rea de supervis√£o', 'view', 'supervision'),
('view:operation', 'Visualizar √°rea de opera√ß√£o', 'view', 'operation'),
('manage:users', 'Gerenciar usu√°rios do sistema', 'manage', 'users'),
('manage:system', 'Gerenciar configura√ß√µes do sistema', 'manage', 'system'),
('view:reports', 'Visualizar relat√≥rios', 'view', 'reports'),
('export:data', 'Exportar dados do sistema', 'export', 'data');
GO

-- ============================================================
-- 4. CRIAR TABELA DE RELACIONAMENTO NIVEL-PERMISS√ÉO
-- ============================================================
CREATE TABLE NivelPermissoes (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    NivelId INT NOT NULL,
    PermissaoId INT NOT NULL,
    DataCriacao DATETIME2 DEFAULT GETDATE(),
    FOREIGN KEY (NivelId) REFERENCES Niveis(Id),
    FOREIGN KEY (PermissaoId) REFERENCES Permissoes(Id),
    UNIQUE(NivelId, PermissaoId)
);

-- Configurar permiss√µes por n√≠vel
-- Master (todas as permiss√µes)
INSERT INTO NivelPermissoes (NivelId, PermissaoId)
SELECT n.Id, p.Id
FROM Niveis n
CROSS JOIN Permissoes p
WHERE n.Nome = 'Master';

-- Supervisor (permiss√µes limitadas)
INSERT INTO NivelPermissoes (NivelId, PermissaoId)
SELECT n.Id, p.Id
FROM Niveis n
CROSS JOIN Permissoes p
WHERE n.Nome = 'Supervisor'
AND p.Nome IN ('view:supervision', 'view:operation', 'view:reports');

-- Operador (permiss√µes b√°sicas)
INSERT INTO NivelPermissoes (NivelId, PermissaoId)
SELECT n.Id, p.Id
FROM Niveis n
CROSS JOIN Permissoes p
WHERE n.Nome = 'Operador'
AND p.Nome IN ('view:operation');
GO

-- ============================================================
-- 5. CRIAR TABELA DE USU√ÅRIOS
-- ============================================================
CREATE TABLE Usuarios (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    Nome NVARCHAR(100) NOT NULL,
    Login NVARCHAR(100) NOT NULL UNIQUE, -- Campo LOGIN em vez de EMAIL
    Email NVARCHAR(255) NULL, -- Email opcional
    SenhaHash NVARCHAR(255) NOT NULL,
    Salt NVARCHAR(255) NOT NULL,
    NivelId INT NOT NULL,
    DataCriacao DATETIME2 DEFAULT GETDATE(),
    DataUltimoLogin DATETIME2 NULL,
    DataUltimaAlteracaoSenha DATETIME2 DEFAULT GETDATE(),
    TentativasLogin INT DEFAULT 0,
    ContaBloqueada BIT DEFAULT 0,
    DataDesbloqueio DATETIME2 NULL,
    Ativo BIT DEFAULT 1,
    CriadoPor INT NULL,
    AlteradoPor INT NULL,
    DataAlteracao DATETIME2 NULL,
    FOREIGN KEY (NivelId) REFERENCES Niveis(Id),
    FOREIGN KEY (CriadoPor) REFERENCES Usuarios(Id),
    FOREIGN KEY (AlteradoPor) REFERENCES Usuarios(Id)
);
GO

-- ============================================================
-- 6. CRIAR TABELA DE AUDITORIA DE LOGIN
-- ============================================================
CREATE TABLE AuditoriaLogin (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    UsuarioId INT NULL,
    Login NVARCHAR(100) NOT NULL, -- Campo LOGIN
    Email NVARCHAR(255) NULL, -- Email opcional
    TipoEvento NVARCHAR(50) NOT NULL,
    EnderecoIP NVARCHAR(45),
    UserAgent NVARCHAR(500),
    DataEvento DATETIME2 DEFAULT GETDATE(),
    Detalhes NVARCHAR(1000),
    FOREIGN KEY (UsuarioId) REFERENCES Usuarios(Id)
);
GO

-- ============================================================
-- 7. CRIAR FUN√á√ïES E PROCEDURES
-- ============================================================

-- Fun√ß√£o para criptografar senha
CREATE FUNCTION dbo.CriptografarSenha(@senha NVARCHAR(255), @salt NVARCHAR(255))
RETURNS NVARCHAR(255)
AS
BEGIN
    RETURN CONVERT(NVARCHAR(255), HASHBYTES('SHA2_512', @senha + @salt), 2);
END
GO

-- Procedure para gerar salt
CREATE PROCEDURE sp_GerarSalt
    @Salt NVARCHAR(255) OUTPUT
AS
BEGIN
    SET @Salt = CONVERT(NVARCHAR(255), HASHBYTES('SHA2_256', CAST(NEWID() AS NVARCHAR(36))), 2);
END
GO

-- Procedure para buscar hierarquia do usu√°rio
CREATE PROCEDURE sp_BuscarHierarquiaUsuario
    @Login NVARCHAR(100) -- Par√¢metro LOGIN
AS
BEGIN
    SET NOCOUNT ON;
    
    SELECT 
        u.Id,
        u.Nome,
        u.Login,
        u.Email,
        n.Nome as Role,
        n.Nivel as NivelHierarquia,
        n.Descricao as DescricaoNivel,
        u.DataUltimoLogin,
        u.ContaBloqueada,
        u.TentativasLogin,
        -- Lista de permiss√µes
        STUFF((
            SELECT ',' + p.Nome
            FROM NivelPermissoes np
            INNER JOIN Permissoes p ON np.PermissaoId = p.Id
            WHERE np.NivelId = u.NivelId AND p.Ativo = 1
            FOR XML PATH('')
        ), 1, 1, '') as Permissoes,
        -- Status da conta
        CASE 
            WHEN u.ContaBloqueada = 1 THEN 'BLOCKED'
            WHEN u.Ativo = 0 THEN 'INACTIVE'
            ELSE 'VALID'
        END as StatusConta
    FROM Usuarios u
    INNER JOIN Niveis n ON u.NivelId = n.Id
    WHERE u.Login = @Login AND u.Ativo = 1;
END
GO

-- ============================================================
-- 8. CRIAR USU√ÅRIO MASTER √öNICO
-- ============================================================
DECLARE @Salt NVARCHAR(255);
DECLARE @SenhaHash NVARCHAR(255);
DECLARE @MasterNivelId INT;

-- Gerar salt √∫nico
EXEC sp_GerarSalt @Salt OUTPUT;

-- Criptografar senha "8996"
SET @SenhaHash = dbo.CriptografarSenha('8996', @Salt);

-- Obter ID do n√≠vel Master
SELECT @MasterNivelId = Id FROM Niveis WHERE Nome = 'Master';

-- Inserir usu√°rio Master
INSERT INTO Usuarios (Nome, Login, Email, SenhaHash, Salt, NivelId)
VALUES ('Andre Felipe', 'andre.felipe', 'andre.felipe@empresa.com', @SenhaHash, @Salt, @MasterNivelId);

PRINT '‚úÖ Usu√°rio Master criado: andre.felipe / 8996';
GO

-- ============================================================
-- 9. CRIAR √çNDICES PARA PERFORMANCE
-- ============================================================
CREATE NONCLUSTERED INDEX IX_Usuarios_Login ON Usuarios(Login); -- √çndice para LOGIN
CREATE NONCLUSTERED INDEX IX_Usuarios_Email ON Usuarios(Email); -- √çndice para EMAIL (opcional)
CREATE NONCLUSTERED INDEX IX_Usuarios_NivelId ON Usuarios(NivelId);
CREATE NONCLUSTERED INDEX IX_AuditoriaLogin_UsuarioId ON AuditoriaLogin(UsuarioId);
CREATE NONCLUSTERED INDEX IX_AuditoriaLogin_DataEvento ON AuditoriaLogin(DataEvento);
GO

-- ============================================================
-- 10. SELECT FINAL PARA TESTAR E USAR NA API N8N
-- ============================================================
PRINT 'üîç Dados do usu√°rio Master para a API:';

-- Query para usar no n8n (substitua os valores pelos par√¢metros do webhook)
SELECT 
    u.Id,
    u.Nome,
    u.Login,
    u.Email,
    n.Nome as Role,
    n.Nivel as NivelHierarquia,
    n.Descricao as DescricaoNivel,
    u.DataUltimoLogin,
    u.ContaBloqueada,
    u.TentativasLogin,
    -- Lista de permiss√µes
    STUFF((
        SELECT ',' + p.Nome
        FROM NivelPermissoes np
        INNER JOIN Permissoes p ON np.PermissaoId = p.Id
        WHERE np.NivelId = u.NivelId AND p.Ativo = 1
        FOR XML PATH('')
    ), 1, 1, '') as Permissoes,
    -- Status da conta
    CASE 
        WHEN u.ContaBloqueada = 1 THEN 'BLOCKED'
        WHEN u.Ativo = 0 THEN 'INACTIVE'
        ELSE 'VALID'
    END as StatusConta
FROM Usuarios u
INNER JOIN Niveis n ON u.NivelId = n.Id
WHERE u.Login = 'andre.felipe'
    AND u.SenhaHash = dbo.CriptografarSenha('8996', u.Salt)
    AND u.Ativo = 1;

PRINT 'üìä Resumo do sistema:';
SELECT 
    'N√≠veis criados' as Tipo, 
    COUNT(*) as Quantidade 
FROM Niveis
UNION ALL
SELECT 
    'Permiss√µes criadas' as Tipo, 
    COUNT(*) as Quantidade 
FROM Permissoes
UNION ALL
SELECT 
    'Usu√°rios criados' as Tipo, 
    COUNT(*) as Quantidade 
FROM Usuarios;

PRINT 'üéØ Sistema recriado com sucesso!';
PRINT 'Login: andre.felipe';
PRINT 'Senha: 8996';
PRINT 'Role: Master';
PRINT 'N√≠vel: 1 (m√°xima hierarquia)';

-- ============================================================
-- QUERY PARA USAR NO N8N (COPY/PASTE)
-- ============================================================
/*
SELECT 
    u.Id,
    u.Nome,
    u.Login,
    u.Email,
    n.Nome as Role,
    n.Nivel as NivelHierarquia,
    n.Descricao as DescricaoNivel,
    u.DataUltimoLogin,
    u.ContaBloqueada,
    u.TentativasLogin,
    STUFF((
        SELECT ',' + p.Nome
        FROM NivelPermissoes np
        INNER JOIN Permissoes p ON np.PermissaoId = p.Id
        WHERE np.NivelId = u.NivelId AND p.Ativo = 1
        FOR XML PATH('')
    ), 1, 1, '') as Permissoes,
    CASE 
        WHEN u.ContaBloqueada = 1 THEN 'BLOCKED'
        WHEN u.Ativo = 0 THEN 'INACTIVE'
        ELSE 'VALID'
    END as StatusConta
FROM europa4.dbo.usuarios u
INNER JOIN europa4.dbo.niveis n ON u.NivelId = n.Id
WHERE u.Login = '{{ $json.body.login }}'
    AND u.SenhaHash = dbo.CriptografarSenha('{{ $json.body.senha }}', u.Salt)
    AND u.Ativo = 1;
*/